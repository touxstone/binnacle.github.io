#+BEGIN_COMMENT
.. title: On generating JSON content from EMACS
.. slug: on-generating-json-content-from-emacs
.. date: 2020-10-24 20:14:31 UTC+01:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT



* Context 
Hi, probably this post work for someone else. I wanted to gain literacy in ASP.NET development but got stuck at [[https://channel9.msdn.com/Series/ASPNET-Core-101/ASPNET-Enhancing-your-Web-API-Part-2-9-of-13][episode 9 of 13, 'Enhancing your Web API']], of 'What is ASP.NET' tutorial series when at trying to generate a json file to feed my web application project with content. So after have a read through the json.el library I came up with the following helper functions, not sure about there is better way of doing it as once done I still have to wrap the result with '[' and ']' (as I couldn't manage to make concatenate it) I would appreciate any comment. Here it goes:
* Step One, the Expected Output
1. As seen on the screenshoot:
   [[file:../images/episode9-of-13-json-for-web-api.png]]

   but my SPA goes about fruits and vegetables items, so following the structure show below:
#+BEGIN_SRC 
[
 {
 "id" : "item",
 "img": "path-name.png|jpg",
 "info": "wolframalphaLink",
 },
 {..
 ..},
 {..
 ..},
 ... 
 ]
#+END_SRC

In order to call my object list easily, lets set a variable 'fruts':
#+ATTR_HTML: :style background-color:#eff0f1;
#+BEGIN_SRC emacs-lisp
(setq fruts '(beetroots carrots cucumber celery cougette kale apple kiwifruit
               avocado lemon pepper garlic ginger sweet potatoes banana orange
               mandarin blackberry))
#+END_SRC

* Step Two, lets generate the block code for every item in my object list
In order to generate the data block for every item
#+BEGIN_SRC emacs-lisp
(defun foo-objs-list (x)
  (mapcar (lambda (i)
            (split-string
             (format "id %s img img/%s info https://www.wolframalpha.com/input/?i=%s"
                                  i i i))) x))
#+END_SRC

* Step Three, Now lets encode every item block in json terms.
3. In order to mapcar every block in json terms:
#+BEGIN_SRC emacs-lisp

(defun foo-encoding-objs-list (x)
  (mapcar (lambda (i)
            (insert
             (format "%s,"
                     (json-encode-plist i))))
          (foo-objs-list x)))

#+END_SRC   

* Step Four, Just use it!
#+BEGIN_SRC emacs-lisp
(foo-encoding-objs-list fruts)
#+END_SRC


4. Or the version combining both preceding functions in one:
#+BEGIN_SRC emacs-lisp
(defun foo-encoding-objs-list-version-all-together (x)
   (mapcar (lambda (i)
             (insert (format "%s," (json-encode-plist i))))
           (mapcar (lambda (i)
                     (split-string
                      (format
                       "id %s img img/%s info https://www.wolframalpha.com/input/?i=%s "
                              i i i))) x)))
#+END_SRC   
